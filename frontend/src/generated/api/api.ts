/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BinSizeRequest
 */
export interface BinSizeRequest {
    /**
     * 
     * @type {string}
     * @memberof BinSizeRequest
     */
    'collection_name': string;
    /**
     * 
     * @type {string}
     * @memberof BinSizeRequest
     */
    'start_datetime': string;
    /**
     * 
     * @type {string}
     * @memberof BinSizeRequest
     */
    'end_datetime': string;
    /**
     * 
     * @type {string}
     * @memberof BinSizeRequest
     */
    'species'?: string;
    /**
     * 
     * @type {number}
     * @memberof BinSizeRequest
     */
    'bin_width'?: number;
    /**
     * 
     * @type {number}
     * @memberof BinSizeRequest
     */
    'audio_padding'?: number;
}
/**
 * 
 * @export
 * @interface Collection
 */
export interface Collection {
    /**
     * 
     * @type {string}
     * @memberof Collection
     */
    'name': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Collection
     */
    'species_list': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof Collection
     */
    'records_count': number;
    /**
     * 
     * @type {number}
     * @memberof Collection
     */
    'predictions_count': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Collection
     */
    'indicated_species_columns': Array<string>;
}
/**
 * 
 * @export
 * @interface DailyHistogramRequest
 */
export interface DailyHistogramRequest {
    /**
     * 
     * @type {string}
     * @memberof DailyHistogramRequest
     */
    'collection_name': string;
    /**
     * 
     * @type {string}
     * @memberof DailyHistogramRequest
     */
    'start_datetime': string;
    /**
     * 
     * @type {string}
     * @memberof DailyHistogramRequest
     */
    'end_datetime': string;
    /**
     * 
     * @type {string}
     * @memberof DailyHistogramRequest
     */
    'species': string;
    /**
     * 
     * @type {number}
     * @memberof DailyHistogramRequest
     */
    'bin_width'?: number;
    /**
     * 
     * @type {number}
     * @memberof DailyHistogramRequest
     */
    'audio_padding'?: number;
    /**
     * 
     * @type {string}
     * @memberof DailyHistogramRequest
     */
    'request_timezone'?: string;
    /**
     * 
     * @type {number}
     * @memberof DailyHistogramRequest
     */
    'min_threshold'?: number;
    /**
     * 
     * @type {number}
     * @memberof DailyHistogramRequest
     */
    'max_threshold'?: number;
}
/**
 * 
 * @export
 * @interface Duration
 */
export interface Duration {
    /**
     * 
     * @type {number}
     * @memberof Duration
     */
    'duration': number;
    /**
     * 
     * @type {number}
     * @memberof Duration
     */
    'record_count': number;
}
/**
 * 
 * @export
 * @interface EventResponse
 */
export interface EventResponse {
    /**
     * 
     * @type {number}
     * @memberof EventResponse
     */
    'predictions_count': number;
    /**
     * 
     * @type {number}
     * @memberof EventResponse
     */
    'species_count': number;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface JobCreatedResponse
 */
export interface JobCreatedResponse {
    /**
     * 
     * @type {number}
     * @memberof JobCreatedResponse
     */
    'job_id': number;
}
/**
 * 
 * @export
 * @interface JobId
 */
export interface JobId {
    /**
     * 
     * @type {number}
     * @memberof JobId
     */
    'job_id'?: number;
}
/**
 * 
 * @export
 * @interface LastUpdate
 */
export interface LastUpdate {
    /**
     * 
     * @type {string}
     * @memberof LastUpdate
     */
    'last_update': string;
}
/**
 * 
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface Prediction
 */
export interface Prediction {
    /**
     * 
     * @type {number}
     * @memberof Prediction
     */
    'prediction_count': number;
    /**
     * 
     * @type {number}
     * @memberof Prediction
     */
    'record_count': number;
}
/**
 * 
 * @export
 * @interface PredictionMax
 */
export interface PredictionMax {
    /**
     * 
     * @type {number}
     * @memberof PredictionMax
     */
    'record_id': number;
    /**
     * 
     * @type {string}
     * @memberof PredictionMax
     */
    'record_datetime': string;
    /**
     * 
     * @type {number}
     * @memberof PredictionMax
     */
    'value': number;
}
/**
 * 
 * @export
 * @interface PredictionsRequest
 */
export interface PredictionsRequest {
    /**
     * 
     * @type {string}
     * @memberof PredictionsRequest
     */
    'collection_name': string;
    /**
     * 
     * @type {string}
     * @memberof PredictionsRequest
     */
    'start_datetime': string;
    /**
     * 
     * @type {string}
     * @memberof PredictionsRequest
     */
    'end_datetime': string;
    /**
     * 
     * @type {string}
     * @memberof PredictionsRequest
     */
    'species': string;
    /**
     * 
     * @type {number}
     * @memberof PredictionsRequest
     */
    'audio_padding'?: number;
    /**
     * 
     * @type {string}
     * @memberof PredictionsRequest
     */
    'request_timezone'?: string;
    /**
     * 
     * @type {number}
     * @memberof PredictionsRequest
     */
    'min_threshold'?: number;
    /**
     * 
     * @type {number}
     * @memberof PredictionsRequest
     */
    'max_threshold'?: number;
}
/**
 * 
 * @export
 * @interface QueryRequest
 */
export interface QueryRequest {
    /**
     * 
     * @type {string}
     * @memberof QueryRequest
     */
    'species': string;
    /**
     * 
     * @type {string}
     * @memberof QueryRequest
     */
    'start_datetime'?: string;
    /**
     * 
     * @type {string}
     * @memberof QueryRequest
     */
    'end_datetime'?: string;
    /**
     * 
     * @type {number}
     * @memberof QueryRequest
     */
    'threshold_min'?: number;
    /**
     * 
     * @type {number}
     * @memberof QueryRequest
     */
    'threshold_max'?: number;
}
/**
 * 
 * @export
 * @interface QueryResponse
 */
export interface QueryResponse {
    /**
     * 
     * @type {number}
     * @memberof QueryResponse
     */
    'predictions_count': number;
    /**
     * 
     * @type {number}
     * @memberof QueryResponse
     */
    'species_count': number;
}
/**
 * 
 * @export
 * @interface RandomSampleRequest
 */
export interface RandomSampleRequest {
    /**
     * 
     * @type {string}
     * @memberof RandomSampleRequest
     */
    'prefix': string;
    /**
     * 
     * @type {string}
     * @memberof RandomSampleRequest
     */
    'species': string;
    /**
     * 
     * @type {number}
     * @memberof RandomSampleRequest
     */
    'sample_size'?: number;
    /**
     * 
     * @type {number}
     * @memberof RandomSampleRequest
     */
    'threshold_min': number;
    /**
     * 
     * @type {number}
     * @memberof RandomSampleRequest
     */
    'threshold_max': number;
    /**
     * 
     * @type {number}
     * @memberof RandomSampleRequest
     */
    'audio_padding'?: number;
    /**
     * 
     * @type {string}
     * @memberof RandomSampleRequest
     */
    'start_datetime'?: string;
    /**
     * 
     * @type {string}
     * @memberof RandomSampleRequest
     */
    'end_datetime'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof RandomSampleRequest
     */
    'random'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof RandomSampleRequest
     */
    'high_pass_frequency'?: number;
    /**
     * 
     * @type {number}
     * @memberof RandomSampleRequest
     */
    'zip_hours_off_set'?: number;
}
/**
 * 
 * @export
 * @interface Record
 */
export interface Record {
    /**
     * 
     * @type {number}
     * @memberof Record
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'filepath': string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'filename': string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'record_datetime': string;
    /**
     * 
     * @type {number}
     * @memberof Record
     */
    'duration': number;
    /**
     * 
     * @type {number}
     * @memberof Record
     */
    'channels': number;
}
/**
 * 
 * @export
 * @interface Report
 */
export interface Report {
    /**
     * 
     * @type {string}
     * @memberof Report
     */
    'first_record_datetime': string;
    /**
     * 
     * @type {string}
     * @memberof Report
     */
    'last_record_datetime': string;
    /**
     * 
     * @type {number}
     * @memberof Report
     */
    'records_count': number;
    /**
     * 
     * @type {number}
     * @memberof Report
     */
    'corrupted_record_count': number;
    /**
     * 
     * @type {number}
     * @memberof Report
     */
    'summed_records_duration': number;
    /**
     * 
     * @type {number}
     * @memberof Report
     */
    'predictions_count': number;
    /**
     * 
     * @type {Array<Duration>}
     * @memberof Report
     */
    'record_duration_histogram_query': Array<Duration>;
    /**
     * 
     * @type {Array<Prediction>}
     * @memberof Report
     */
    'record_prediction_count_histogram_query': Array<Prediction>;
    /**
     * 
     * @type {Array<Summary>}
     * @memberof Report
     */
    'monthly_summary_query': Array<Summary>;
    /**
     * 
     * @type {Array<Summary>}
     * @memberof Report
     */
    'daily_summary_query': Array<Summary>;
}
/**
 * 
 * @export
 * @interface ResultJob
 */
export interface ResultJob {
    /**
     * 
     * @type {number}
     * @memberof ResultJob
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ResultJob
     */
    'collection': string;
    /**
     * 
     * @type {string}
     * @memberof ResultJob
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof ResultJob
     */
    'status': string;
    /**
     * 
     * @type {object}
     * @memberof ResultJob
     */
    'metadata'?: object;
    /**
     * 
     * @type {string}
     * @memberof ResultJob
     */
    'progress': string;
    /**
     * 
     * @type {string}
     * @memberof ResultJob
     */
    'error'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResultJob
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof ResultJob
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface Species
 */
export interface Species {
    /**
     * 
     * @type {string}
     * @memberof Species
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof Species
     */
    'has_index': boolean;
}
/**
 * 
 * @export
 * @interface Summary
 */
export interface Summary {
    /**
     * 
     * @type {string}
     * @memberof Summary
     */
    'date': string;
    /**
     * 
     * @type {number}
     * @memberof Summary
     */
    'count': number;
    /**
     * 
     * @type {number}
     * @memberof Summary
     */
    'duration': number;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string>}
     * @memberof ValidationError
     */
    'loc': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add Index To Prefix
         * @param {string} prefixName 
         * @param {string} columnName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addIndexToCollection: async (prefixName: string, columnName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'prefixName' is not null or undefined
            assertParamExists('addIndexToCollection', 'prefixName', prefixName)
            // verify required parameter 'columnName' is not null or undefined
            assertParamExists('addIndexToCollection', 'columnName', columnName)
            const localVarPath = `/prefix/{prefix_name}/predictions/{column_name}/index`
                .replace(`{${"prefix_name"}}`, encodeURIComponent(String(prefixName)))
                .replace(`{${"column_name"}}`, encodeURIComponent(String(columnName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Job
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteJob: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteJob', 'id', id)
            const localVarPath = `/jobs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Drop Index From Prefix
         * @param {string} prefixName 
         * @param {string} columnName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dropIndexFromCollection: async (prefixName: string, columnName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'prefixName' is not null or undefined
            assertParamExists('dropIndexFromCollection', 'prefixName', prefixName)
            // verify required parameter 'columnName' is not null or undefined
            assertParamExists('dropIndexFromCollection', 'columnName', columnName)
            const localVarPath = `/prefix/{prefix_name}/predictions/{column_name}/index`
                .replace(`{${"prefix_name"}}`, encodeURIComponent(String(prefixName)))
                .replace(`{${"column_name"}}`, encodeURIComponent(String(columnName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Jobs
         * @param {string} [prefix] 
         * @param {string} [type] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllJobs: async (prefix?: string, type?: string, status?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (prefix !== undefined) {
                localVarQueryParameter['prefix'] = prefix;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Prefix Information
         * @param {string} prefixName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionInformation: async (prefixName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'prefixName' is not null or undefined
            assertParamExists('getCollectionInformation', 'prefixName', prefixName)
            const localVarPath = `/prefix/{prefix_name}`
                .replace(`{${"prefix_name"}}`, encodeURIComponent(String(prefixName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Prefix
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionNames: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/prefix/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Prefix Predictions Count
         * @param {string} prefixName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionPredictionsCount: async (prefixName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'prefixName' is not null or undefined
            assertParamExists('getCollectionPredictionsCount', 'prefixName', prefixName)
            const localVarPath = `/prefix/{prefix_name}/predictions/count`
                .replace(`{${"prefix_name"}}`, encodeURIComponent(String(prefixName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Species Histogram
         * @param {string} collectionName 
         * @param {string} species 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionPredictionsSpeciesHistogram: async (collectionName: string, species: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionName' is not null or undefined
            assertParamExists('getCollectionPredictionsSpeciesHistogram', 'collectionName', collectionName)
            // verify required parameter 'species' is not null or undefined
            assertParamExists('getCollectionPredictionsSpeciesHistogram', 'species', species)
            const localVarPath = `/prefix/{collection_name}/predictions/histogram/{species}`
                .replace(`{${"collection_name"}}`, encodeURIComponent(String(collectionName)))
                .replace(`{${"species"}}`, encodeURIComponent(String(species)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Collection Predictions Species Max
         * @param {string} prefixName 
         * @param {string} species 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionPredictionsSpeciesMax: async (prefixName: string, species: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'prefixName' is not null or undefined
            assertParamExists('getCollectionPredictionsSpeciesMax', 'prefixName', prefixName)
            // verify required parameter 'species' is not null or undefined
            assertParamExists('getCollectionPredictionsSpeciesMax', 'species', species)
            const localVarPath = `/prefix/{prefix_name}/predictions/max/{species}`
                .replace(`{${"prefix_name"}}`, encodeURIComponent(String(prefixName)))
                .replace(`{${"species"}}`, encodeURIComponent(String(species)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Collection Report
         * @param {string} collectionName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionReport: async (collectionName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionName' is not null or undefined
            assertParamExists('getCollectionReport', 'collectionName', collectionName)
            const localVarPath = `/prefix/{collection_name}/report`
                .replace(`{${"collection_name"}}`, encodeURIComponent(String(collectionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Prefix Species
         * @param {string} prefixName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionSpecies: async (prefixName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'prefixName' is not null or undefined
            assertParamExists('getCollectionSpecies', 'prefixName', prefixName)
            const localVarPath = `/prefix/{prefix_name}/species`
                .replace(`{${"prefix_name"}}`, encodeURIComponent(String(prefixName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Prefix Records Count
         * @param {string} prefixName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountOfCollection: async (prefixName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'prefixName' is not null or undefined
            assertParamExists('getCountOfCollection', 'prefixName', prefixName)
            const localVarPath = `/prefix/{prefix_name}/records/count`
                .replace(`{${"prefix_name"}}`, encodeURIComponent(String(prefixName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Prefix Records Duration
         * @param {string} prefixName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDurationOfCollection: async (prefixName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'prefixName' is not null or undefined
            assertParamExists('getDurationOfCollection', 'prefixName', prefixName)
            const localVarPath = `/prefix/{prefix_name}/records/duration`
                .replace(`{${"prefix_name"}}`, encodeURIComponent(String(prefixName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get First Record Of Prefix
         * @param {string} prefixName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFirstRecordOfCollection: async (prefixName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'prefixName' is not null or undefined
            assertParamExists('getFirstRecordOfCollection', 'prefixName', prefixName)
            const localVarPath = `/prefix/{prefix_name}/records/first`
                .replace(`{${"prefix_name"}}`, encodeURIComponent(String(prefixName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Last Record Of Prefix
         * @param {string} prefixName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLastRecordOfCollection: async (prefixName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'prefixName' is not null or undefined
            assertParamExists('getLastRecordOfCollection', 'prefixName', prefixName)
            const localVarPath = `/prefix/{prefix_name}/records/last`
                .replace(`{${"prefix_name"}}`, encodeURIComponent(String(prefixName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Last Update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLastUpdate: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/jobs/last_update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Random Sample
         * @param {RandomSampleRequest} randomSampleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRandomSample: async (randomSampleRequest: RandomSampleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'randomSampleRequest' is not null or undefined
            assertParamExists('getRandomSample', 'randomSampleRequest', randomSampleRequest)
            const localVarPath = `/sample`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(randomSampleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Random Sample
         * @param {string} filename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRandomSampleFile: async (filename: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'filename' is not null or undefined
            assertParamExists('getRandomSampleFile', 'filename', filename)
            const localVarPath = `/random_sample/file/{filename}`
                .replace(`{${"filename"}}`, encodeURIComponent(String(filename)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Query Prediction Table
         * @param {string} prefixName 
         * @param {QueryRequest} queryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCollectionMetadata: async (prefixName: string, queryRequest: QueryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'prefixName' is not null or undefined
            assertParamExists('queryCollectionMetadata', 'prefixName', prefixName)
            // verify required parameter 'queryRequest' is not null or undefined
            assertParamExists('queryCollectionMetadata', 'queryRequest', queryRequest)
            const localVarPath = `/prefix/{prefix_name}/predictions`
                .replace(`{${"prefix_name"}}`, encodeURIComponent(String(prefixName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRootGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add Index To Prefix
         * @param {string} prefixName 
         * @param {string} columnName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addIndexToCollection(prefixName: string, columnName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobId>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addIndexToCollection(prefixName, columnName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Job
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteJob(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteJob(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Drop Index From Prefix
         * @param {string} prefixName 
         * @param {string} columnName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dropIndexFromCollection(prefixName: string, columnName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dropIndexFromCollection(prefixName, columnName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get All Jobs
         * @param {string} [prefix] 
         * @param {string} [type] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllJobs(prefix?: string, type?: string, status?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResultJob>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllJobs(prefix, type, status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Prefix Information
         * @param {string} prefixName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionInformation(prefixName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Collection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionInformation(prefixName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Read Prefix
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionNames(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionNames(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Prefix Predictions Count
         * @param {string} prefixName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionPredictionsCount(prefixName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionPredictionsCount(prefixName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Species Histogram
         * @param {string} collectionName 
         * @param {string} species 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionPredictionsSpeciesHistogram(collectionName: string, species: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionPredictionsSpeciesHistogram(collectionName, species, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Collection Predictions Species Max
         * @param {string} prefixName 
         * @param {string} species 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionPredictionsSpeciesMax(prefixName: string, species: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PredictionMax>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionPredictionsSpeciesMax(prefixName, species, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Collection Report
         * @param {string} collectionName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionReport(collectionName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Report>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionReport(collectionName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Prefix Species
         * @param {string} prefixName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionSpecies(prefixName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Species>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionSpecies(prefixName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Prefix Records Count
         * @param {string} prefixName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCountOfCollection(prefixName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCountOfCollection(prefixName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Prefix Records Duration
         * @param {string} prefixName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDurationOfCollection(prefixName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDurationOfCollection(prefixName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get First Record Of Prefix
         * @param {string} prefixName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFirstRecordOfCollection(prefixName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Record>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFirstRecordOfCollection(prefixName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Last Record Of Prefix
         * @param {string} prefixName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLastRecordOfCollection(prefixName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Record>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLastRecordOfCollection(prefixName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Last Update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLastUpdate(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LastUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLastUpdate(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Random Sample
         * @param {RandomSampleRequest} randomSampleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRandomSample(randomSampleRequest: RandomSampleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobId>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRandomSample(randomSampleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Random Sample
         * @param {string} filename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRandomSampleFile(filename: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRandomSampleFile(filename, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Query Prediction Table
         * @param {string} prefixName 
         * @param {QueryRequest} queryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryCollectionMetadata(prefixName: string, queryRequest: QueryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryCollectionMetadata(prefixName, queryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Read Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readRootGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readRootGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Add Index To Prefix
         * @param {string} prefixName 
         * @param {string} columnName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addIndexToCollection(prefixName: string, columnName: string, options?: any): AxiosPromise<JobId> {
            return localVarFp.addIndexToCollection(prefixName, columnName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Job
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteJob(id: number, options?: any): AxiosPromise<Message> {
            return localVarFp.deleteJob(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Drop Index From Prefix
         * @param {string} prefixName 
         * @param {string} columnName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dropIndexFromCollection(prefixName: string, columnName: string, options?: any): AxiosPromise<Message> {
            return localVarFp.dropIndexFromCollection(prefixName, columnName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Jobs
         * @param {string} [prefix] 
         * @param {string} [type] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllJobs(prefix?: string, type?: string, status?: string, options?: any): AxiosPromise<Array<ResultJob>> {
            return localVarFp.getAllJobs(prefix, type, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Prefix Information
         * @param {string} prefixName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionInformation(prefixName: string, options?: any): AxiosPromise<Collection> {
            return localVarFp.getCollectionInformation(prefixName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Prefix
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionNames(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getCollectionNames(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Prefix Predictions Count
         * @param {string} prefixName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionPredictionsCount(prefixName: string, options?: any): AxiosPromise<number> {
            return localVarFp.getCollectionPredictionsCount(prefixName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Species Histogram
         * @param {string} collectionName 
         * @param {string} species 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionPredictionsSpeciesHistogram(collectionName: string, species: string, options?: any): AxiosPromise<Array<number>> {
            return localVarFp.getCollectionPredictionsSpeciesHistogram(collectionName, species, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Collection Predictions Species Max
         * @param {string} prefixName 
         * @param {string} species 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionPredictionsSpeciesMax(prefixName: string, species: string, options?: any): AxiosPromise<Array<PredictionMax>> {
            return localVarFp.getCollectionPredictionsSpeciesMax(prefixName, species, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Collection Report
         * @param {string} collectionName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionReport(collectionName: string, options?: any): AxiosPromise<Report> {
            return localVarFp.getCollectionReport(collectionName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Prefix Species
         * @param {string} prefixName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionSpecies(prefixName: string, options?: any): AxiosPromise<Array<Species>> {
            return localVarFp.getCollectionSpecies(prefixName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Prefix Records Count
         * @param {string} prefixName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountOfCollection(prefixName: string, options?: any): AxiosPromise<number> {
            return localVarFp.getCountOfCollection(prefixName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Prefix Records Duration
         * @param {string} prefixName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDurationOfCollection(prefixName: string, options?: any): AxiosPromise<number> {
            return localVarFp.getDurationOfCollection(prefixName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get First Record Of Prefix
         * @param {string} prefixName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFirstRecordOfCollection(prefixName: string, options?: any): AxiosPromise<Record> {
            return localVarFp.getFirstRecordOfCollection(prefixName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Last Record Of Prefix
         * @param {string} prefixName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLastRecordOfCollection(prefixName: string, options?: any): AxiosPromise<Record> {
            return localVarFp.getLastRecordOfCollection(prefixName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Last Update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLastUpdate(options?: any): AxiosPromise<LastUpdate> {
            return localVarFp.getLastUpdate(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Random Sample
         * @param {RandomSampleRequest} randomSampleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRandomSample(randomSampleRequest: RandomSampleRequest, options?: any): AxiosPromise<JobId> {
            return localVarFp.getRandomSample(randomSampleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Random Sample
         * @param {string} filename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRandomSampleFile(filename: string, options?: any): AxiosPromise<any> {
            return localVarFp.getRandomSampleFile(filename, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Query Prediction Table
         * @param {string} prefixName 
         * @param {QueryRequest} queryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCollectionMetadata(prefixName: string, queryRequest: QueryRequest, options?: any): AxiosPromise<QueryResponse> {
            return localVarFp.queryCollectionMetadata(prefixName, queryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readRootGet(options?: any): AxiosPromise<any> {
            return localVarFp.readRootGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Add Index To Prefix
     * @param {string} prefixName 
     * @param {string} columnName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addIndexToCollection(prefixName: string, columnName: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addIndexToCollection(prefixName, columnName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Job
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteJob(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteJob(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Drop Index From Prefix
     * @param {string} prefixName 
     * @param {string} columnName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public dropIndexFromCollection(prefixName: string, columnName: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).dropIndexFromCollection(prefixName, columnName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Jobs
     * @param {string} [prefix] 
     * @param {string} [type] 
     * @param {string} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllJobs(prefix?: string, type?: string, status?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllJobs(prefix, type, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Prefix Information
     * @param {string} prefixName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCollectionInformation(prefixName: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCollectionInformation(prefixName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Prefix
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCollectionNames(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCollectionNames(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Prefix Predictions Count
     * @param {string} prefixName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCollectionPredictionsCount(prefixName: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCollectionPredictionsCount(prefixName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Species Histogram
     * @param {string} collectionName 
     * @param {string} species 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCollectionPredictionsSpeciesHistogram(collectionName: string, species: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCollectionPredictionsSpeciesHistogram(collectionName, species, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Collection Predictions Species Max
     * @param {string} prefixName 
     * @param {string} species 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCollectionPredictionsSpeciesMax(prefixName: string, species: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCollectionPredictionsSpeciesMax(prefixName, species, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Collection Report
     * @param {string} collectionName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCollectionReport(collectionName: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCollectionReport(collectionName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Prefix Species
     * @param {string} prefixName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCollectionSpecies(prefixName: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCollectionSpecies(prefixName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Prefix Records Count
     * @param {string} prefixName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCountOfCollection(prefixName: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCountOfCollection(prefixName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Prefix Records Duration
     * @param {string} prefixName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDurationOfCollection(prefixName: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getDurationOfCollection(prefixName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get First Record Of Prefix
     * @param {string} prefixName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getFirstRecordOfCollection(prefixName: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getFirstRecordOfCollection(prefixName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Last Record Of Prefix
     * @param {string} prefixName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getLastRecordOfCollection(prefixName: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getLastRecordOfCollection(prefixName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Last Update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getLastUpdate(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getLastUpdate(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Random Sample
     * @param {RandomSampleRequest} randomSampleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRandomSample(randomSampleRequest: RandomSampleRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRandomSample(randomSampleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Random Sample
     * @param {string} filename 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRandomSampleFile(filename: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRandomSampleFile(filename, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Query Prediction Table
     * @param {string} prefixName 
     * @param {QueryRequest} queryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public queryCollectionMetadata(prefixName: string, queryRequest: QueryRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).queryCollectionMetadata(prefixName, queryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readRootGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readRootGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EvaluationApi - axios parameter creator
 * @export
 */
export const EvaluationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Bin Sizes
         * @param {BinSizeRequest} binSizeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBinSizes: async (binSizeRequest: BinSizeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'binSizeRequest' is not null or undefined
            assertParamExists('getBinSizes', 'binSizeRequest', binSizeRequest)
            const localVarPath = `/evaluation/bin-sizes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(binSizeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Daily Histograms
         * @param {DailyHistogramRequest} dailyHistogramRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDailyHistograms: async (dailyHistogramRequest: DailyHistogramRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dailyHistogramRequest' is not null or undefined
            assertParamExists('getDailyHistograms', 'dailyHistogramRequest', dailyHistogramRequest)
            const localVarPath = `/evaluation/daily-histograms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dailyHistogramRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Events
         * @param {string} collectionName 
         * @param {string} species 
         * @param {string} [startDatetime] 
         * @param {string} [endDatetime] 
         * @param {number} [threshold] 
         * @param {string} [eventGrouping] 
         * @param {number} [audioPadding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems: async (collectionName: string, species: string, startDatetime?: string, endDatetime?: string, threshold?: number, eventGrouping?: string, audioPadding?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionName' is not null or undefined
            assertParamExists('getItems', 'collectionName', collectionName)
            // verify required parameter 'species' is not null or undefined
            assertParamExists('getItems', 'species', species)
            const localVarPath = `/evaluation/{collection_name}/events`
                .replace(`{${"collection_name"}}`, encodeURIComponent(String(collectionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (species !== undefined) {
                localVarQueryParameter['species'] = species;
            }

            if (startDatetime !== undefined) {
                localVarQueryParameter['start_datetime'] = startDatetime;
            }

            if (endDatetime !== undefined) {
                localVarQueryParameter['end_datetime'] = endDatetime;
            }

            if (threshold !== undefined) {
                localVarQueryParameter['threshold'] = threshold;
            }

            if (eventGrouping !== undefined) {
                localVarQueryParameter['event_grouping'] = eventGrouping;
            }

            if (audioPadding !== undefined) {
                localVarQueryParameter['audio_padding'] = audioPadding;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Predictions
         * @param {PredictionsRequest} predictionsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPredictions: async (predictionsRequest: PredictionsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'predictionsRequest' is not null or undefined
            assertParamExists('getPredictions', 'predictionsRequest', predictionsRequest)
            const localVarPath = `/evaluation/predictions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(predictionsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EvaluationApi - functional programming interface
 * @export
 */
export const EvaluationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EvaluationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Bin Sizes
         * @param {BinSizeRequest} binSizeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBinSizes(binSizeRequest: BinSizeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobCreatedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBinSizes(binSizeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Daily Histograms
         * @param {DailyHistogramRequest} dailyHistogramRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDailyHistograms(dailyHistogramRequest: DailyHistogramRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobCreatedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDailyHistograms(dailyHistogramRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Events
         * @param {string} collectionName 
         * @param {string} species 
         * @param {string} [startDatetime] 
         * @param {string} [endDatetime] 
         * @param {number} [threshold] 
         * @param {string} [eventGrouping] 
         * @param {number} [audioPadding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItems(collectionName: string, species: string, startDatetime?: string, endDatetime?: string, threshold?: number, eventGrouping?: string, audioPadding?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItems(collectionName, species, startDatetime, endDatetime, threshold, eventGrouping, audioPadding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Predictions
         * @param {PredictionsRequest} predictionsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPredictions(predictionsRequest: PredictionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobCreatedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPredictions(predictionsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EvaluationApi - factory interface
 * @export
 */
export const EvaluationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EvaluationApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Bin Sizes
         * @param {BinSizeRequest} binSizeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBinSizes(binSizeRequest: BinSizeRequest, options?: any): AxiosPromise<JobCreatedResponse> {
            return localVarFp.getBinSizes(binSizeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Daily Histograms
         * @param {DailyHistogramRequest} dailyHistogramRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDailyHistograms(dailyHistogramRequest: DailyHistogramRequest, options?: any): AxiosPromise<JobCreatedResponse> {
            return localVarFp.getDailyHistograms(dailyHistogramRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Events
         * @param {string} collectionName 
         * @param {string} species 
         * @param {string} [startDatetime] 
         * @param {string} [endDatetime] 
         * @param {number} [threshold] 
         * @param {string} [eventGrouping] 
         * @param {number} [audioPadding] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems(collectionName: string, species: string, startDatetime?: string, endDatetime?: string, threshold?: number, eventGrouping?: string, audioPadding?: number, options?: any): AxiosPromise<EventResponse> {
            return localVarFp.getItems(collectionName, species, startDatetime, endDatetime, threshold, eventGrouping, audioPadding, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Predictions
         * @param {PredictionsRequest} predictionsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPredictions(predictionsRequest: PredictionsRequest, options?: any): AxiosPromise<JobCreatedResponse> {
            return localVarFp.getPredictions(predictionsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EvaluationApi - object-oriented interface
 * @export
 * @class EvaluationApi
 * @extends {BaseAPI}
 */
export class EvaluationApi extends BaseAPI {
    /**
     * 
     * @summary Get Bin Sizes
     * @param {BinSizeRequest} binSizeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApi
     */
    public getBinSizes(binSizeRequest: BinSizeRequest, options?: AxiosRequestConfig) {
        return EvaluationApiFp(this.configuration).getBinSizes(binSizeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Daily Histograms
     * @param {DailyHistogramRequest} dailyHistogramRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApi
     */
    public getDailyHistograms(dailyHistogramRequest: DailyHistogramRequest, options?: AxiosRequestConfig) {
        return EvaluationApiFp(this.configuration).getDailyHistograms(dailyHistogramRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Events
     * @param {string} collectionName 
     * @param {string} species 
     * @param {string} [startDatetime] 
     * @param {string} [endDatetime] 
     * @param {number} [threshold] 
     * @param {string} [eventGrouping] 
     * @param {number} [audioPadding] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApi
     */
    public getItems(collectionName: string, species: string, startDatetime?: string, endDatetime?: string, threshold?: number, eventGrouping?: string, audioPadding?: number, options?: AxiosRequestConfig) {
        return EvaluationApiFp(this.configuration).getItems(collectionName, species, startDatetime, endDatetime, threshold, eventGrouping, audioPadding, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Predictions
     * @param {PredictionsRequest} predictionsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationApi
     */
    public getPredictions(predictionsRequest: PredictionsRequest, options?: AxiosRequestConfig) {
        return EvaluationApiFp(this.configuration).getPredictions(predictionsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



fragment Model on models {
  id
  name
  additional_docker_arguments
  additional_model_arguments
  segment_duration
  step_duration
  remarks
  updated_at
  created_at
}

query filterModel($search: String = "%%", $limit: Int = 10, $offset: Int = 0, $order: order_by = asc) {
  data: models(
    order_by: { name: asc }
    limit: $limit
    offset: $offset
    where: { name: { _ilike: $search } }
  ) {
    ...Model
  }
}

query getModelList {
  data: models(order_by: { name: asc }) {
    ...Model
  }
}

query getModelById($id: Int!) {
  data: models_by_pk(id: $id) {
    ...Model
  }
}

mutation insertModel(
  $remarks: String = ""
  $name: String!
  $additional_docker_arguments: String = ""
  $additional_model_arguments: String = ""
  $segment_duration: Int
  $step_duration: Int
) {
  data: insert_models_one(
    object: {
      name: $name
      remarks: $remarks
      additional_docker_arguments: ""
      additional_model_arguments: ""
      segment_duration: 0
      step_duration: 0
    }
  ) {
    ...Model
  }
}

mutation updateModel(
  $id: Int!
  $remarks: String
  $additional_docker_arguments: String
  $additional_model_arguments: String
  $segment_duration: Int
  $step_duration: Int
) {
  data: update_models_by_pk(
    pk_columns: { id: $id }
    _set: {
      remarks: $remarks
      additional_docker_arguments: $additional_docker_arguments
      additional_model_arguments: $additional_model_arguments
      segment_duration: $segment_duration
      step_duration: $step_duration
    }
  ) {
    ...Model
  }
}

mutation deleteModel($id: Int!) {
  data: delete_models_by_pk(id: $id) {
    ...Model
  }
}

query getModelsPagniated(
  $limit: Int = 10
  $offset: Int = 0
  $order_by: [models_order_by!] = {}
  $where: models_bool_exp = {}
) {
  items: models(limit: $limit, offset: $offset, order_by: $order_by, where: $where) {
    ...Model
  }
  total: models_aggregate(where: $where) {
    aggregate {
      count
    }
  }
}

mutation inferenceSiteTimespan(
  $modelId: Int!
  $siteId: Int!
  $startDatetime: String!
  $endDatetime: String!
) {
  data: inferenceSiteTimespan(
    inferenceSiteRequestInput: {
      modelId: $modelId
      siteId: $siteId
      startDatetime: $startDatetime
      endDatetime: $endDatetime
    }
  ) {
    jobId
  }
}

query getModelLabels($modelId: Int!) {
  data: model_labels(where: { model_id: { _eq: $modelId } }, order_by: { label: { name: asc } }) {
    label {
      name
      german
      english
      id
    }
  }
}
